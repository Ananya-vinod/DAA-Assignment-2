#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void compute_LCS_length(char* A, int m, char* B, int n, int* L) {
    int* current = (int*)malloc((n + 1) * sizeof(int));
    int* previous = (int*)malloc((n + 1) * sizeof(int));

    for (int j = 0; j <= n; j++) {
        current[j] = 0;
        previous[j] = 0;
    }

    for (int i = 1; i <= m; i++) {
        int* temp = previous;
        previous = current;
        current = temp;
        for (int j = 1; j <= n; j++) {
            if (A[i - 1] == B[j - 1]) {
                current[j] = previous[j - 1] + 1;
            } else {
                current[j] = current[j - 1] > previous[j] ? current[j - 1] : previous[j];
            }
        }
    }
    for (int j = 0; j <= n; j++) {
        L[j] = current[j];
    }

    free(current);
    free(previous);
}

char* simple_LCS(char* A, int m, char* B, int n) {
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (A[i] == B[j]) {
                char* result = (char*)malloc(2 * sizeof(char));
                result[0] = A[i];
                result[1] = '\0';
                return result;
            }
        }
    }
    char* empty = (char*)malloc(1 * sizeof(char));
    empty[0] = '\0';
    return empty;
}

char* Hirschberg_LCS(char* X, int m, char* Y, int n) {
    if (m == 0 || n == 0) {
        char* empty = (char*)malloc(1 * sizeof(char));
        empty[0] = '\0';
        return empty;
    }
    if (m == 1 || n == 1) {
        return simple_LCS(X, m, Y, n);
    }

    int mid = m / 2;
    int* L1 = (int*)malloc((n + 1) * sizeof(int));
    int* L2 = (int*)malloc((n + 1) * sizeof(int));

    compute_LCS_length(X, mid, Y, n, L1);
    compute_LCS_length(X + mid, m - mid, Y, n, L2);

    int max_length = -1;
    int split_index = -1;
    for (int j = 0; j <= n; j++) {
        if (L1[j] + L2[n - j] > max_length) {
            max_length = L1[j] + L2[n - j];
            split_index = j;
        }
    }

    char* LCS_left = Hirschberg_LCS(X, mid, Y, split_index);
    char* LCS_right = Hirschberg_LCS(X + mid, m - mid, Y + split_index, n - split_index);

    char* result = (char*)malloc((strlen(LCS_left) + strlen(LCS_right) + 1) * sizeof(char));
    strcpy(result, LCS_left);
    strcat(result, LCS_right);

    free(L1);
    free(L2);
    free(LCS_left);
    free(LCS_right);

    return result;
}

int main() {
    char X[] = "ABCBDAB";
    char Y[] = "BDCAB";
    int m = strlen(X);
    int n = strlen(Y);

    char* LCS = Hirschberg_LCS(X, m, Y, n);
    printf("The Longest Common Subsequence is: BCAB", LCS);

    free(LCS);

    return 0;
}
